자바 스크립트에서 변하지 않는 규칙
-자바 스크립트에서 모든 객체는 함수로 생성된다
프로토타입이라는 객체가 없으니까

함수는 일급 객체
배열도 배열 객체
->둘 다 함수로 생성됨
객체란 프로퍼티의 모음
프로퍼티란 키(프로퍼티의 이름) 값의 연속
이 때 값이 함수일 경우 메서드라고 부름

a라는 객체 안에 b라는 프로퍼티 이름을 정하고 function 생성, 그것을 메서드라 부름

arguments
: 유사 배열 객체, 
실제로 들어온 인자값들을 기억하고 있음,
유사 배열이기 때문에 배열로는 사용할 수 없다
callee가 arguments가 속해있는 함수 가리킴 즉, 자기 자신을 가리킴(재귀 함수로도 사용함)
함수가 생성되면 자동으로 객체가 생성됨(일종의 공식)

console.log(arguments[0]); -->배열 형식으로 접근가능

배열을 생성할 때 Array 객체가 생성됨

함수가 생성되면 함수이름.prototype이라는 객체가 생긴다.(일종의 공식)
함수 안에 prototype이라는 프로퍼티가 생김
생성자 함수.prototype 안 _proto_로 a를 재사용 가능

prototype이 함수.prototype의 주소(레퍼런스)를 가리키고 있음

함수.prototype안에 constructor이라는 프로퍼티가 함수 원본을 가리킴

자바스크립트의 모든 객체에는 _proto_라는 프로퍼티가 있다.
만들어진 객체 안 프로토타입은 자신을 생성한 함수의 프로토타입을 가리킨다->프로토타입 링크

해즈원프로퍼티 메소드가 없으므로
이 객체에서 호출하는 무언가가 없다 _프로토_를 타고 함수.prototype으로 감
프로토 링크타고 또 감
-->프로토 타입 링크를 따라가는 것을 프로토 타입 체인이라고 함

console.dir(Object.prototype);

new Object(); ->객체
var b= function();
var b= new fuction();

this는 특정 상황을 제외하고는 무조건 전역 바인딩
this가 어디에 속해서 어디서 호출되는가에 따라서 지칭하는 게 달라진다